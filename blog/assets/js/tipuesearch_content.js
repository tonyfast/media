var tipuesearch = {
  "pages": [
    {
      "title": "2021-10-03-pd-calendar",
      "text": "what will we learn when we make calendars in pandas?\u00b6below we are going to make calendars using pandas and explore the pandas api while we're at it. we'll explore different parts of thr pandas api like:\n\npandas.date_range to begin our work with the calendar\npandas.DataFrame.assign to set new columns on our dataframe\ndf.apply(pandas.Series) to wide dataframes on container elements\npandas.DataFrame.unstack to change the shape of our dataframe by translating row indexes to columns.\npandas.DataFrame.style to use a dataframe to provide cell level styling in our output.\nwe used pandas.DataFrame.groupby in a for loop, as an iterator, which is quite a powerful technique for inspecting grouped operations\n\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n    import pandas\n\n\n    \n\n\n\n\n\n\n\nto start with, we'll use pandas date/time tooling to construct the days of the year.\n\n\n\n\n\n\n\npandas.date_range is basically a smart range function for dates, we've defined the steps to be daily between the start and stop dates. it is really wise in pandas to work with your time and dates using their pandas types, there are better api affordances that remaining in an integer timestamp or time formatted string.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n    start, stop = \"2020-12-28\", \"2021-12-31\"\n    dates: pandas.Index =  pandas.date_range(start, stop, freq=\"D\")\n    F\"our dates index has {len(dates)} days\" \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n'our dates index has 369 days'\n\n\n\n\n\n\n\n\n\n\n\nit would really if our calendar demonstrated something practical which is why we'll import the third party holidays library; the calendars we draw will highlight holidays.\n\npip install holidays\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n    import holidays\n\n\n    \n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n    F\"\"\"there are {len([y for x, y in vars(holidays).items() if isinstance(y, type) and issubclass(y, holidays.HolidayBase)])} different calendars included in `holidays`\"\"\"\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n'there are 262 different calendars included in `holidays`'\n\n\n\n\n\n\n\n\n\n\n\nfor demonstration we'll restrict our holidays to just the us for now.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n    us: holidays.HolidayBase = holidays.UnitedStates()\n\n\n    \n\n\n\n\n\n\n\nto start with we'll provide the form of our indexes and columns of our DataFrame\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n    df: pandas.DataFrame = pandas.DataFrame(None, dates.rename(\"date\"), \"year week month day dayofweek holiday\".split())\n    df.dropna()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      year\n      week\n      month\n      day\n      dayofweek\n      holiday\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n    \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\nwe'll introduce the pandas.DataFrame.assign method that lets you assign new columns using keyword parameters. this is just a way another way of setting items using normal python syntax\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n    df = df.assign(year=dates.year)\n    df.head(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      year\n      week\n      month\n      day\n      dayofweek\n      holiday\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-12-28\n      2020\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-12-29\n      2020\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nmultiple columns can be assigned at once, and below we'll fill out the rest out dataset.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n    df = df.assign(\n        month=dates.month, \n        dayofweek=dates.dayofweek, \n        day=dates.day, \n        holiday=df.index.map(us.__contains__)\n    )\n    df.head(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      year\n      week\n      month\n      day\n      dayofweek\n      holiday\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-12-28\n      2020\n      NaN\n      12\n      28\n      0\n      False\n    \n    \n      2020-12-29\n      2020\n      NaN\n      12\n      29\n      1\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\npandas api has changed and we need to use the new pandas.Timestamp.isocalendar to expand a datetime index into the ISO year, week number, and weekday. which is the new way to access the weekofyear; direct access to dates.index.weekofyear is being deprecated.\nto get the day of the week we prepare an the isocalendar and assign the week column.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n    iso: pandas.DataFrame = dates.isocalendar()\n    df = df.assign(\n        week=iso.week\n    )\n    df.sample(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      year\n      week\n      month\n      day\n      dayofweek\n      holiday\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2021-02-07\n      2021\n      5\n      2\n      7\n      6\n      False\n    \n    \n      2021-06-22\n      2021\n      25\n      6\n      22\n      1\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nfor a calendar we'll want to group days into months. which we can acheive with a few steps in pandas.\nit is really hard to avoid importing numpy, and we will use the standard library calendar module zhoosh up our calendars.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n    import numpy, calendar\n\n\n    \n\n\n\n\n\n\n\ncalendar provides localized names for the days and months.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \n    month_names, day_names = list(calendar.month_name), list(calendar.day_name)\n\n\n    \n\n\n\n\n\n\n\ndisplay the calendars\n\n\n\n\n\n\n\nwe're near the place where we can present our calendars. all we need to do is iterate through the months\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \n    df = df.set_index([\"year\", \"month\", \"week\", \"dayofweek\"])\n    df.sample(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      \n      \n      day\n      holiday\n    \n    \n      year\n      month\n      week\n      dayofweek\n      \n      \n    \n  \n  \n    \n      2021\n      10\n      39\n      4\n      1\n      False\n    \n    \n      9\n      37\n      0\n      13\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nstyle_calendar is meant to style a single month dataframe. we'll discuss the design choices following the code.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n    background = {\n        True: \"\"\"background-color: yellow; color: black;\"\"\",\n        False: \"\"\"background-color: purple;\"\"\",\n        numpy.nan: \"\"\"font-size: 0px;\"\"\"\n    }\n\n\n    \n\n\n\n\n\n\n\nfor each day, we need to align it with a holiday. we're going to acheive this by unstacking the dayofweek which moves the row index to columns, and creates a multiindex. this index of months and days same so that access to their values are natural later on.\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n    months = df.unstack(\"dayofweek\")\n    days = months[\"day\"].fillna(0).astype(int)\n\n\n    \n\n\n\n\n\n\n\nwhat follows is kind of a holiday calendar using the pandas style attribute.\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n    def bg_color(x):\n        return months[\"holiday\"].loc[x.name].apply(background.get)\n\n\n    \n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n    days.sample(3).style.apply(\n        lambda x: months[\"holiday\"].loc[x.name].apply(background.get), axis=1\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n#T_aac3e_row0_col0, #T_aac3e_row0_col1, #T_aac3e_row0_col2, #T_aac3e_row0_col3, #T_aac3e_row0_col4, #T_aac3e_row0_col5, #T_aac3e_row0_col6, #T_aac3e_row1_col0, #T_aac3e_row1_col1, #T_aac3e_row1_col2, #T_aac3e_row1_col3, #T_aac3e_row1_col4, #T_aac3e_row1_col5, #T_aac3e_row1_col6, #T_aac3e_row2_col0, #T_aac3e_row2_col1, #T_aac3e_row2_col2, #T_aac3e_row2_col3, #T_aac3e_row2_col4, #T_aac3e_row2_col5, #T_aac3e_row2_col6 {\n  background-color: purple;\n}\n\n\n  \n    \n      \u00a0\n      \u00a0\n      dayofweek\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n    \n      year\n      month\n      week\n      \u00a0\n      \u00a0\n      \u00a0\n      \u00a0\n      \u00a0\n      \u00a0\n      \u00a0\n    \n  \n  \n    \n      2021\n      12\n      49\n      6\n      7\n      8\n      9\n      10\n      11\n      12\n    \n    \n      2\n      6\n      8\n      9\n      10\n      11\n      12\n      13\n      14\n    \n    \n      5\n      18\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\npersonally, i'd like a little more control over the composition of our calendars. we'll do this by mixing the IPython display objects and pandas.\n\n\n\n\n\n\n\nstyle each month using the pandas.DataFrame.style attribute\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n    monthly = dict(\n        (i, g.style.hide_index().apply(bg_color, axis=1))\n        for i, g in days.groupby([\"year\", \"month\"])\n    )\n    monthly\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n\n{(2020, 12): <pandas.io.formats.style.Styler at 0x7f0b3b46b1c0>,\n (2021, 1): <pandas.io.formats.style.Styler at 0x7f0b3b46b370>,\n (2021, 2): <pandas.io.formats.style.Styler at 0x7f0b3b46b4f0>,\n (2021, 3): <pandas.io.formats.style.Styler at 0x7f0b3b46b670>,\n (2021, 4): <pandas.io.formats.style.Styler at 0x7f0b3b46b9a0>,\n (2021, 5): <pandas.io.formats.style.Styler at 0x7f0b3b46bb80>,\n (2021, 6): <pandas.io.formats.style.Styler at 0x7f0b3b46bd60>,\n (2021, 7): <pandas.io.formats.style.Styler at 0x7f0b3b46bf40>,\n (2021, 8): <pandas.io.formats.style.Styler at 0x7f0b3b3b7160>,\n (2021, 9): <pandas.io.formats.style.Styler at 0x7f0b3b454f10>,\n (2021, 10): <pandas.io.formats.style.Styler at 0x7f0b3b454e50>,\n (2021, 11): <pandas.io.formats.style.Styler at 0x7f0b3b454970>,\n (2021, 12): <pandas.io.formats.style.Styler at 0x7f0b3b454d00>}\n\n\n\n\n\n\n\n\n\n\n\nconstruct raw html beginning with the monthly styled dataframes, and combine them into a parent container with the selector div.calendars. we put a heading for each month.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \n    HTML(\"\"\"<div class=\"calendars\">%s</div>\"\"\" %\"\\n\".join([\n        \"\"\"<div class=\"month\"><h2>%s %i</h2>%s</div>\"\"\"%(\n            month_names[i[1]], i[0], monthly[i].render())\n        for i in monthly\n    ]))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[18]:\n\n\n\nDecember 2020\n#T_845e6_row0_col0, #T_845e6_row0_col1, #T_845e6_row0_col2, #T_845e6_row0_col3 {\n  background-color: purple;\n}\n#T_845e6_row0_col4, #T_845e6_row0_col5, #T_845e6_row0_col6 {\n  font-size: 0px;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      28\n      29\n      30\n      31\n      0\n      0\n      0\n    \n  \n\n\nJanuary 2021\n#T_343f9_row0_col0, #T_343f9_row0_col1, #T_343f9_row0_col2, #T_343f9_row0_col3, #T_343f9_row0_col4, #T_343f9_row0_col5, #T_343f9_row0_col6, #T_343f9_row1_col0, #T_343f9_row1_col1, #T_343f9_row1_col2, #T_343f9_row1_col3, #T_343f9_row1_col4, #T_343f9_row1_col5, #T_343f9_row1_col6, #T_343f9_row2_col1, #T_343f9_row2_col2, #T_343f9_row2_col3, #T_343f9_row2_col4, #T_343f9_row2_col5, #T_343f9_row2_col6, #T_343f9_row3_col0, #T_343f9_row3_col1, #T_343f9_row3_col2, #T_343f9_row3_col3, #T_343f9_row3_col4, #T_343f9_row3_col5, #T_343f9_row3_col6, #T_343f9_row4_col5, #T_343f9_row4_col6 {\n  background-color: purple;\n}\n#T_343f9_row2_col0, #T_343f9_row4_col4 {\n  background-color: yellow;\n  color: black;\n}\n#T_343f9_row4_col0, #T_343f9_row4_col1, #T_343f9_row4_col2, #T_343f9_row4_col3 {\n  font-size: 0px;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n    \n      11\n      12\n      13\n      14\n      15\n      16\n      17\n    \n    \n      18\n      19\n      20\n      21\n      22\n      23\n      24\n    \n    \n      25\n      26\n      27\n      28\n      29\n      30\n      31\n    \n    \n      0\n      0\n      0\n      0\n      1\n      2\n      3\n    \n  \n\n\nFebruary 2021\n#T_feb45_row0_col0, #T_feb45_row0_col1, #T_feb45_row0_col2, #T_feb45_row0_col3, #T_feb45_row0_col4, #T_feb45_row0_col5, #T_feb45_row0_col6, #T_feb45_row1_col0, #T_feb45_row1_col1, #T_feb45_row1_col2, #T_feb45_row1_col3, #T_feb45_row1_col4, #T_feb45_row1_col5, #T_feb45_row1_col6, #T_feb45_row2_col1, #T_feb45_row2_col2, #T_feb45_row2_col3, #T_feb45_row2_col4, #T_feb45_row2_col5, #T_feb45_row2_col6, #T_feb45_row3_col0, #T_feb45_row3_col1, #T_feb45_row3_col2, #T_feb45_row3_col3, #T_feb45_row3_col4, #T_feb45_row3_col5, #T_feb45_row3_col6 {\n  background-color: purple;\n}\n#T_feb45_row2_col0 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n    \n    \n      8\n      9\n      10\n      11\n      12\n      13\n      14\n    \n    \n      15\n      16\n      17\n      18\n      19\n      20\n      21\n    \n    \n      22\n      23\n      24\n      25\n      26\n      27\n      28\n    \n  \n\n\nMarch 2021\n#T_b199b_row0_col0, #T_b199b_row0_col1, #T_b199b_row0_col2, #T_b199b_row0_col3, #T_b199b_row0_col4, #T_b199b_row0_col5, #T_b199b_row0_col6, #T_b199b_row1_col0, #T_b199b_row1_col1, #T_b199b_row1_col2, #T_b199b_row1_col3, #T_b199b_row1_col4, #T_b199b_row1_col5, #T_b199b_row1_col6, #T_b199b_row2_col0, #T_b199b_row2_col1, #T_b199b_row2_col2, #T_b199b_row2_col3, #T_b199b_row2_col4, #T_b199b_row2_col5, #T_b199b_row2_col6, #T_b199b_row3_col0, #T_b199b_row3_col1, #T_b199b_row3_col2, #T_b199b_row3_col3, #T_b199b_row3_col4, #T_b199b_row3_col5, #T_b199b_row3_col6, #T_b199b_row4_col0, #T_b199b_row4_col1, #T_b199b_row4_col2 {\n  background-color: purple;\n}\n#T_b199b_row4_col3, #T_b199b_row4_col4, #T_b199b_row4_col5, #T_b199b_row4_col6 {\n  font-size: 0px;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n    \n    \n      8\n      9\n      10\n      11\n      12\n      13\n      14\n    \n    \n      15\n      16\n      17\n      18\n      19\n      20\n      21\n    \n    \n      22\n      23\n      24\n      25\n      26\n      27\n      28\n    \n    \n      29\n      30\n      31\n      0\n      0\n      0\n      0\n    \n  \n\n\nApril 2021\n#T_c673d_row0_col0, #T_c673d_row0_col1, #T_c673d_row0_col2, #T_c673d_row4_col5, #T_c673d_row4_col6 {\n  font-size: 0px;\n}\n#T_c673d_row0_col3, #T_c673d_row0_col4, #T_c673d_row0_col5, #T_c673d_row0_col6, #T_c673d_row1_col0, #T_c673d_row1_col1, #T_c673d_row1_col2, #T_c673d_row1_col3, #T_c673d_row1_col4, #T_c673d_row1_col5, #T_c673d_row1_col6, #T_c673d_row2_col0, #T_c673d_row2_col1, #T_c673d_row2_col2, #T_c673d_row2_col3, #T_c673d_row2_col4, #T_c673d_row2_col5, #T_c673d_row2_col6, #T_c673d_row3_col0, #T_c673d_row3_col1, #T_c673d_row3_col2, #T_c673d_row3_col3, #T_c673d_row3_col4, #T_c673d_row3_col5, #T_c673d_row3_col6, #T_c673d_row4_col0, #T_c673d_row4_col1, #T_c673d_row4_col2, #T_c673d_row4_col3, #T_c673d_row4_col4 {\n  background-color: purple;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      0\n      1\n      2\n      3\n      4\n    \n    \n      5\n      6\n      7\n      8\n      9\n      10\n      11\n    \n    \n      12\n      13\n      14\n      15\n      16\n      17\n      18\n    \n    \n      19\n      20\n      21\n      22\n      23\n      24\n      25\n    \n    \n      26\n      27\n      28\n      29\n      30\n      0\n      0\n    \n  \n\n\nMay 2021\n#T_ebbe5_row0_col0, #T_ebbe5_row0_col1, #T_ebbe5_row0_col2, #T_ebbe5_row0_col3, #T_ebbe5_row0_col4, #T_ebbe5_row5_col1, #T_ebbe5_row5_col2, #T_ebbe5_row5_col3, #T_ebbe5_row5_col4, #T_ebbe5_row5_col5, #T_ebbe5_row5_col6 {\n  font-size: 0px;\n}\n#T_ebbe5_row0_col5, #T_ebbe5_row0_col6, #T_ebbe5_row1_col0, #T_ebbe5_row1_col1, #T_ebbe5_row1_col2, #T_ebbe5_row1_col3, #T_ebbe5_row1_col4, #T_ebbe5_row1_col5, #T_ebbe5_row1_col6, #T_ebbe5_row2_col0, #T_ebbe5_row2_col1, #T_ebbe5_row2_col2, #T_ebbe5_row2_col3, #T_ebbe5_row2_col4, #T_ebbe5_row2_col5, #T_ebbe5_row2_col6, #T_ebbe5_row3_col0, #T_ebbe5_row3_col1, #T_ebbe5_row3_col2, #T_ebbe5_row3_col3, #T_ebbe5_row3_col4, #T_ebbe5_row3_col5, #T_ebbe5_row3_col6, #T_ebbe5_row4_col0, #T_ebbe5_row4_col1, #T_ebbe5_row4_col2, #T_ebbe5_row4_col3, #T_ebbe5_row4_col4, #T_ebbe5_row4_col5, #T_ebbe5_row4_col6 {\n  background-color: purple;\n}\n#T_ebbe5_row5_col0 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      0\n      0\n      0\n      1\n      2\n    \n    \n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n    \n      10\n      11\n      12\n      13\n      14\n      15\n      16\n    \n    \n      17\n      18\n      19\n      20\n      21\n      22\n      23\n    \n    \n      24\n      25\n      26\n      27\n      28\n      29\n      30\n    \n    \n      31\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\nJune 2021\n#T_740c6_row0_col0, #T_740c6_row4_col3, #T_740c6_row4_col4, #T_740c6_row4_col5, #T_740c6_row4_col6 {\n  font-size: 0px;\n}\n#T_740c6_row0_col1, #T_740c6_row0_col2, #T_740c6_row0_col3, #T_740c6_row0_col4, #T_740c6_row0_col5, #T_740c6_row0_col6, #T_740c6_row1_col0, #T_740c6_row1_col1, #T_740c6_row1_col2, #T_740c6_row1_col3, #T_740c6_row1_col4, #T_740c6_row1_col5, #T_740c6_row1_col6, #T_740c6_row2_col0, #T_740c6_row2_col1, #T_740c6_row2_col2, #T_740c6_row2_col3, #T_740c6_row2_col4, #T_740c6_row2_col6, #T_740c6_row3_col0, #T_740c6_row3_col1, #T_740c6_row3_col2, #T_740c6_row3_col3, #T_740c6_row3_col4, #T_740c6_row3_col5, #T_740c6_row3_col6, #T_740c6_row4_col0, #T_740c6_row4_col1, #T_740c6_row4_col2 {\n  background-color: purple;\n}\n#T_740c6_row2_col5 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n    \n      7\n      8\n      9\n      10\n      11\n      12\n      13\n    \n    \n      14\n      15\n      16\n      17\n      18\n      19\n      20\n    \n    \n      21\n      22\n      23\n      24\n      25\n      26\n      27\n    \n    \n      28\n      29\n      30\n      0\n      0\n      0\n      0\n    \n  \n\n\nJuly 2021\n#T_e6695_row0_col0, #T_e6695_row0_col1, #T_e6695_row0_col2, #T_e6695_row4_col6 {\n  font-size: 0px;\n}\n#T_e6695_row0_col3, #T_e6695_row0_col4, #T_e6695_row0_col5, #T_e6695_row1_col1, #T_e6695_row1_col2, #T_e6695_row1_col3, #T_e6695_row1_col4, #T_e6695_row1_col5, #T_e6695_row1_col6, #T_e6695_row2_col0, #T_e6695_row2_col1, #T_e6695_row2_col2, #T_e6695_row2_col3, #T_e6695_row2_col4, #T_e6695_row2_col5, #T_e6695_row2_col6, #T_e6695_row3_col0, #T_e6695_row3_col1, #T_e6695_row3_col2, #T_e6695_row3_col3, #T_e6695_row3_col4, #T_e6695_row3_col5, #T_e6695_row3_col6, #T_e6695_row4_col0, #T_e6695_row4_col1, #T_e6695_row4_col2, #T_e6695_row4_col3, #T_e6695_row4_col4, #T_e6695_row4_col5 {\n  background-color: purple;\n}\n#T_e6695_row0_col6, #T_e6695_row1_col0 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      0\n      1\n      2\n      3\n      4\n    \n    \n      5\n      6\n      7\n      8\n      9\n      10\n      11\n    \n    \n      12\n      13\n      14\n      15\n      16\n      17\n      18\n    \n    \n      19\n      20\n      21\n      22\n      23\n      24\n      25\n    \n    \n      26\n      27\n      28\n      29\n      30\n      31\n      0\n    \n  \n\n\nAugust 2021\n#T_671a4_row0_col0, #T_671a4_row0_col1, #T_671a4_row0_col2, #T_671a4_row0_col3, #T_671a4_row0_col4, #T_671a4_row0_col5, #T_671a4_row5_col2, #T_671a4_row5_col3, #T_671a4_row5_col4, #T_671a4_row5_col5, #T_671a4_row5_col6 {\n  font-size: 0px;\n}\n#T_671a4_row0_col6, #T_671a4_row1_col0, #T_671a4_row1_col1, #T_671a4_row1_col2, #T_671a4_row1_col3, #T_671a4_row1_col4, #T_671a4_row1_col5, #T_671a4_row1_col6, #T_671a4_row2_col0, #T_671a4_row2_col1, #T_671a4_row2_col2, #T_671a4_row2_col3, #T_671a4_row2_col4, #T_671a4_row2_col5, #T_671a4_row2_col6, #T_671a4_row3_col0, #T_671a4_row3_col1, #T_671a4_row3_col2, #T_671a4_row3_col3, #T_671a4_row3_col4, #T_671a4_row3_col5, #T_671a4_row3_col6, #T_671a4_row4_col0, #T_671a4_row4_col1, #T_671a4_row4_col2, #T_671a4_row4_col3, #T_671a4_row4_col4, #T_671a4_row4_col5, #T_671a4_row4_col6, #T_671a4_row5_col0, #T_671a4_row5_col1 {\n  background-color: purple;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      0\n      0\n      0\n      0\n      1\n    \n    \n      2\n      3\n      4\n      5\n      6\n      7\n      8\n    \n    \n      9\n      10\n      11\n      12\n      13\n      14\n      15\n    \n    \n      16\n      17\n      18\n      19\n      20\n      21\n      22\n    \n    \n      23\n      24\n      25\n      26\n      27\n      28\n      29\n    \n    \n      30\n      31\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\nSeptember 2021\n#T_584e6_row0_col0, #T_584e6_row0_col1, #T_584e6_row4_col4, #T_584e6_row4_col5, #T_584e6_row4_col6 {\n  font-size: 0px;\n}\n#T_584e6_row0_col2, #T_584e6_row0_col3, #T_584e6_row0_col4, #T_584e6_row0_col5, #T_584e6_row0_col6, #T_584e6_row1_col1, #T_584e6_row1_col2, #T_584e6_row1_col3, #T_584e6_row1_col4, #T_584e6_row1_col5, #T_584e6_row1_col6, #T_584e6_row2_col0, #T_584e6_row2_col1, #T_584e6_row2_col2, #T_584e6_row2_col3, #T_584e6_row2_col4, #T_584e6_row2_col5, #T_584e6_row2_col6, #T_584e6_row3_col0, #T_584e6_row3_col1, #T_584e6_row3_col2, #T_584e6_row3_col3, #T_584e6_row3_col4, #T_584e6_row3_col5, #T_584e6_row3_col6, #T_584e6_row4_col0, #T_584e6_row4_col1, #T_584e6_row4_col2, #T_584e6_row4_col3 {\n  background-color: purple;\n}\n#T_584e6_row1_col0 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n      3\n      4\n      5\n    \n    \n      6\n      7\n      8\n      9\n      10\n      11\n      12\n    \n    \n      13\n      14\n      15\n      16\n      17\n      18\n      19\n    \n    \n      20\n      21\n      22\n      23\n      24\n      25\n      26\n    \n    \n      27\n      28\n      29\n      30\n      0\n      0\n      0\n    \n  \n\n\nOctober 2021\n#T_5b5c0_row0_col0, #T_5b5c0_row0_col1, #T_5b5c0_row0_col2, #T_5b5c0_row0_col3 {\n  font-size: 0px;\n}\n#T_5b5c0_row0_col4, #T_5b5c0_row0_col5, #T_5b5c0_row0_col6, #T_5b5c0_row1_col0, #T_5b5c0_row1_col1, #T_5b5c0_row1_col2, #T_5b5c0_row1_col3, #T_5b5c0_row1_col4, #T_5b5c0_row1_col5, #T_5b5c0_row1_col6, #T_5b5c0_row2_col1, #T_5b5c0_row2_col2, #T_5b5c0_row2_col3, #T_5b5c0_row2_col4, #T_5b5c0_row2_col5, #T_5b5c0_row2_col6, #T_5b5c0_row3_col0, #T_5b5c0_row3_col1, #T_5b5c0_row3_col2, #T_5b5c0_row3_col3, #T_5b5c0_row3_col4, #T_5b5c0_row3_col5, #T_5b5c0_row3_col6, #T_5b5c0_row4_col0, #T_5b5c0_row4_col1, #T_5b5c0_row4_col2, #T_5b5c0_row4_col3, #T_5b5c0_row4_col4, #T_5b5c0_row4_col5, #T_5b5c0_row4_col6 {\n  background-color: purple;\n}\n#T_5b5c0_row2_col0 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      0\n      0\n      1\n      2\n      3\n    \n    \n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n    \n      11\n      12\n      13\n      14\n      15\n      16\n      17\n    \n    \n      18\n      19\n      20\n      21\n      22\n      23\n      24\n    \n    \n      25\n      26\n      27\n      28\n      29\n      30\n      31\n    \n  \n\n\nNovember 2021\n#T_fdc7e_row0_col0, #T_fdc7e_row0_col1, #T_fdc7e_row0_col2, #T_fdc7e_row0_col3, #T_fdc7e_row0_col4, #T_fdc7e_row0_col5, #T_fdc7e_row0_col6, #T_fdc7e_row1_col0, #T_fdc7e_row1_col1, #T_fdc7e_row1_col2, #T_fdc7e_row1_col4, #T_fdc7e_row1_col5, #T_fdc7e_row1_col6, #T_fdc7e_row2_col0, #T_fdc7e_row2_col1, #T_fdc7e_row2_col2, #T_fdc7e_row2_col3, #T_fdc7e_row2_col4, #T_fdc7e_row2_col5, #T_fdc7e_row2_col6, #T_fdc7e_row3_col0, #T_fdc7e_row3_col1, #T_fdc7e_row3_col2, #T_fdc7e_row3_col4, #T_fdc7e_row3_col5, #T_fdc7e_row3_col6, #T_fdc7e_row4_col0, #T_fdc7e_row4_col1 {\n  background-color: purple;\n}\n#T_fdc7e_row1_col3, #T_fdc7e_row3_col3 {\n  background-color: yellow;\n  color: black;\n}\n#T_fdc7e_row4_col2, #T_fdc7e_row4_col3, #T_fdc7e_row4_col4, #T_fdc7e_row4_col5, #T_fdc7e_row4_col6 {\n  font-size: 0px;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n    \n    \n      8\n      9\n      10\n      11\n      12\n      13\n      14\n    \n    \n      15\n      16\n      17\n      18\n      19\n      20\n      21\n    \n    \n      22\n      23\n      24\n      25\n      26\n      27\n      28\n    \n    \n      29\n      30\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\nDecember 2021\n#T_7d870_row0_col0, #T_7d870_row0_col1, #T_7d870_row4_col5, #T_7d870_row4_col6 {\n  font-size: 0px;\n}\n#T_7d870_row0_col2, #T_7d870_row0_col3, #T_7d870_row0_col4, #T_7d870_row0_col5, #T_7d870_row0_col6, #T_7d870_row1_col0, #T_7d870_row1_col1, #T_7d870_row1_col2, #T_7d870_row1_col3, #T_7d870_row1_col4, #T_7d870_row1_col5, #T_7d870_row1_col6, #T_7d870_row2_col0, #T_7d870_row2_col1, #T_7d870_row2_col2, #T_7d870_row2_col3, #T_7d870_row2_col4, #T_7d870_row2_col5, #T_7d870_row2_col6, #T_7d870_row3_col0, #T_7d870_row3_col1, #T_7d870_row3_col2, #T_7d870_row3_col3, #T_7d870_row3_col6, #T_7d870_row4_col0, #T_7d870_row4_col1, #T_7d870_row4_col2, #T_7d870_row4_col3 {\n  background-color: purple;\n}\n#T_7d870_row3_col4, #T_7d870_row3_col5, #T_7d870_row4_col4 {\n  background-color: yellow;\n  color: black;\n}\n\n\n  \n    \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n      3\n      4\n      5\n    \n    \n      6\n      7\n      8\n      9\n      10\n      11\n      12\n    \n    \n      13\n      14\n      15\n      16\n      17\n      18\n      19\n    \n    \n      20\n      21\n      22\n      23\n      24\n      25\n      26\n    \n    \n      27\n      28\n      29\n      30\n      31\n      0\n      0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nusing the prior html output, and div.calendars as a reference we use the modern css grid display layout. this results in the calendars being reorganized by the browser.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \n    HTML(\n        \"\"\"<style>\n        .calendars {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n        }\n        </style>\"\"\"\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n    .calendars {\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr;\n    }\n    \n\n\n\n\n\n\n\n\n\n\nrecap\u00b6we've managed most of your goal using pandas until we needed to customize the display, at that point we combined knowledge of html and css to gain extra control over our display. we used a few interesting pandas.DataFrame  features like:\n\npandas.date_range to begin our work with the calendar\npandas.DataFrame.assign to set new columns on our dataframe\ndf.apply(pandas.Series) to wide dataframes on container elements\npandas.DataFrame.unstack to change the shape of our dataframe by translating row indexes to columns.\npandas.DataFrame.style to use a dataframe to provide cell level styling in our output.\nwe used pandas.DataFrame.groupby in a for loop, as an iterator, which is quite a powerful technique for inspecting grouped operations\n\n\n\n\n\n\n\nIn\u00a0[\u00a0]:",
      "tags": "",
      "url": "/posts/0d5cbee1f3b4aac205e9ddd407d0f4dc/2021-10-03-pd-calendar/"
    },
    {
      "title": "2021-10-11-colorizing",
      "text": "what do we learn when we make colormaps from dataframes\u00b6\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n    import pandas, numpy, toolz.curried as toolz\n\n\n    \n\n\n\n\n\n\n\nwe'll begin with a small linear domain of values between 0..1.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n    domain = numpy.linspace(0, 1, 11)\n\n\n    \n\n\n\n\n\n\n\nwe'll focus on primary color components to start. from the primary components we can make a lot of colors. we combine the domain with empty values, to create triplets that will become our color.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n    triples = list(map(numpy.array, zip(domain, domain*0, domain*0)))\n\n\n    \n\n\n\n\n\n\n\nwe'll start with making red, with a focus on rgb values, as a series of triples between 0..255.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n    red = pandas.Series(triples).apply(numpy.array).mul(255)\n    red\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n0                    [0.0, 0.0, 0.0]\n1                   [25.5, 0.0, 0.0]\n2                   [51.0, 0.0, 0.0]\n3      [76.50000000000001, 0.0, 0.0]\n4                  [102.0, 0.0, 0.0]\n5                  [127.5, 0.0, 0.0]\n6     [153.00000000000003, 0.0, 0.0]\n7     [178.50000000000003, 0.0, 0.0]\n8                  [204.0, 0.0, 0.0]\n9                  [229.5, 0.0, 0.0]\n10                 [255.0, 0.0, 0.0]\ndtype: object\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n    def rgb(x): \"format a pandas cells\"; return \"font-size: 0px; background-color: rgb(\" + \", \".join(\n            map(str, x)\n        ) + \");\"\n\n\n    \n\n\n\n\n\n\n\nwhy are we calling this value red?\nbecause we can explicitly the format for each cell and (255, 0, 0) is completely red.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n    red.to_frame(\"red\").T.applymap(rgb)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      red\n      font-size: 0px; background-color: rgb(0.0, 0.0...\n      font-size: 0px; background-color: rgb(25.5, 0....\n      font-size: 0px; background-color: rgb(51.0, 0....\n      font-size: 0px; background-color: rgb(76.50000...\n      font-size: 0px; background-color: rgb(102.0, 0...\n      font-size: 0px; background-color: rgb(127.5, 0...\n      font-size: 0px; background-color: rgb(153.0000...\n      font-size: 0px; background-color: rgb(178.5000...\n      font-size: 0px; background-color: rgb(204.0, 0...\n      font-size: 0px; background-color: rgb(229.5, 0...\n      font-size: 0px; background-color: rgb(255.0, 0...\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nwith a small change to code in the cell above, we can indeed colorize our table.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n    red.to_frame(\"red\").T.style.applymap(rgb)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n#T_28aad_row0_col0 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 0.0);\n}\n#T_28aad_row0_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 0.0, 0.0);\n}\n#T_28aad_row0_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 0.0, 0.0);\n}\n#T_28aad_row0_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 0.0, 0.0);\n}\n#T_28aad_row0_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 0.0, 0.0);\n}\n#T_28aad_row0_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 0.0, 0.0);\n}\n#T_28aad_row0_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 0.0, 0.0);\n}\n#T_28aad_row0_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 0.0, 0.0);\n}\n#T_28aad_row0_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 0.0, 0.0);\n}\n#T_28aad_row0_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 0.0, 0.0);\n}\n#T_28aad_row0_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 0.0, 0.0);\n}\n\n\n  \n    \n      \u00a0\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      red\n      [0. 0. 0.]\n      [25.5  0.   0. ]\n      [51.  0.  0.]\n      [76.5  0.   0. ]\n      [102.   0.   0.]\n      [127.5   0.    0. ]\n      [153.   0.   0.]\n      [178.5   0.    0. ]\n      [204.   0.   0.]\n      [229.5   0.    0. ]\n      [255.   0.   0.]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\ngreen and blue are a shift of the indices in the triple.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n    @toolz.curry\n    def shift(n, x):\n        return numpy.concatenate([x[n:], x[:n]])\n\n\n    \n\n\n\n\n\n\n\nwith shift(1) for blue, and shift(2) for green we can construct a composite dataframe with all of our rgb colorvalues ...\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n    colors = \"red blue green\".split()\n\n\n    \n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n    df = pandas.concat({\n        c: red.apply(shift(i)).rename(c) for i, c in enumerate(colors)\n    }, axis=1).T; df\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      red\n      [0.0, 0.0, 0.0]\n      [25.5, 0.0, 0.0]\n      [51.0, 0.0, 0.0]\n      [76.50000000000001, 0.0, 0.0]\n      [102.0, 0.0, 0.0]\n      [127.5, 0.0, 0.0]\n      [153.00000000000003, 0.0, 0.0]\n      [178.50000000000003, 0.0, 0.0]\n      [204.0, 0.0, 0.0]\n      [229.5, 0.0, 0.0]\n      [255.0, 0.0, 0.0]\n    \n    \n      blue\n      [0.0, 0.0, 0.0]\n      [0.0, 0.0, 25.5]\n      [0.0, 0.0, 51.0]\n      [0.0, 0.0, 76.50000000000001]\n      [0.0, 0.0, 102.0]\n      [0.0, 0.0, 127.5]\n      [0.0, 0.0, 153.00000000000003]\n      [0.0, 0.0, 178.50000000000003]\n      [0.0, 0.0, 204.0]\n      [0.0, 0.0, 229.5]\n      [0.0, 0.0, 255.0]\n    \n    \n      green\n      [0.0, 0.0, 0.0]\n      [0.0, 25.5, 0.0]\n      [0.0, 51.0, 0.0]\n      [0.0, 76.50000000000001, 0.0]\n      [0.0, 102.0, 0.0]\n      [0.0, 127.5, 0.0]\n      [0.0, 153.00000000000003, 0.0]\n      [0.0, 178.50000000000003, 0.0]\n      [0.0, 204.0, 0.0]\n      [0.0, 229.5, 0.0]\n      [0.0, 255.0, 0.0]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nthat may be stylized using the df.style feature\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n    df.style.applymap(rgb)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n#T_dd8aa_row0_col0, #T_dd8aa_row1_col0, #T_dd8aa_row2_col0 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 0.0);\n}\n#T_dd8aa_row0_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 0.0, 0.0);\n}\n#T_dd8aa_row0_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 0.0, 0.0);\n}\n#T_dd8aa_row0_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 0.0, 0.0);\n}\n#T_dd8aa_row0_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 0.0, 0.0);\n}\n#T_dd8aa_row0_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 0.0, 0.0);\n}\n#T_dd8aa_row0_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 0.0, 0.0);\n}\n#T_dd8aa_row0_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 0.0, 0.0);\n}\n#T_dd8aa_row0_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 0.0, 0.0);\n}\n#T_dd8aa_row0_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 0.0, 0.0);\n}\n#T_dd8aa_row0_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 0.0, 0.0);\n}\n#T_dd8aa_row1_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 25.5);\n}\n#T_dd8aa_row1_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 51.0);\n}\n#T_dd8aa_row1_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 76.50000000000001);\n}\n#T_dd8aa_row1_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 102.0);\n}\n#T_dd8aa_row1_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 127.5);\n}\n#T_dd8aa_row1_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 153.00000000000003);\n}\n#T_dd8aa_row1_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 178.50000000000003);\n}\n#T_dd8aa_row1_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 204.0);\n}\n#T_dd8aa_row1_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 229.5);\n}\n#T_dd8aa_row1_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 255.0);\n}\n#T_dd8aa_row2_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 25.5, 0.0);\n}\n#T_dd8aa_row2_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 51.0, 0.0);\n}\n#T_dd8aa_row2_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 76.50000000000001, 0.0);\n}\n#T_dd8aa_row2_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 102.0, 0.0);\n}\n#T_dd8aa_row2_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 127.5, 0.0);\n}\n#T_dd8aa_row2_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 153.00000000000003, 0.0);\n}\n#T_dd8aa_row2_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 178.50000000000003, 0.0);\n}\n#T_dd8aa_row2_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 204.0, 0.0);\n}\n#T_dd8aa_row2_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 229.5, 0.0);\n}\n#T_dd8aa_row2_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 255.0, 0.0);\n}\n\n\n  \n    \n      \u00a0\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      red\n      [0. 0. 0.]\n      [25.5  0.   0. ]\n      [51.  0.  0.]\n      [76.5  0.   0. ]\n      [102.   0.   0.]\n      [127.5   0.    0. ]\n      [153.   0.   0.]\n      [178.5   0.    0. ]\n      [204.   0.   0.]\n      [229.5   0.    0. ]\n      [255.   0.   0.]\n    \n    \n      blue\n      [0. 0. 0.]\n      [ 0.   0.  25.5]\n      [ 0.  0. 51.]\n      [ 0.   0.  76.5]\n      [  0.   0. 102.]\n      [  0.    0.  127.5]\n      [  0.   0. 153.]\n      [  0.    0.  178.5]\n      [  0.   0. 204.]\n      [  0.    0.  229.5]\n      [  0.   0. 255.]\n    \n    \n      green\n      [0. 0. 0.]\n      [ 0.  25.5  0. ]\n      [ 0. 51.  0.]\n      [ 0.  76.5  0. ]\n      [  0. 102.   0.]\n      [  0.  127.5   0. ]\n      [  0. 153.   0.]\n      [  0.  178.5   0. ]\n      [  0. 204.   0.]\n      [  0.  229.5   0. ]\n      [  0. 255.   0.]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nfrom our df containing a primary palette we can build a secondary palette.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n    secondary =     pandas.concat([    \n        df.loc[\"red\"].add(df.loc[\"blue\"]).rename(\"violet\"),\n        df.loc[\"red\"].add(df.loc[\"green\"]).rename(\"yellow\"),\n        df.loc[\"blue\"].add(df.loc[\"green\"]).rename(\"cyan\")\n    ], axis=1).T; secondary.style.applymap(rgb)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n#T_7fb02_row0_col0, #T_7fb02_row1_col0, #T_7fb02_row2_col0 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 0.0);\n}\n#T_7fb02_row0_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 0.0, 25.5);\n}\n#T_7fb02_row0_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 0.0, 51.0);\n}\n#T_7fb02_row0_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 0.0, 76.50000000000001);\n}\n#T_7fb02_row0_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 0.0, 102.0);\n}\n#T_7fb02_row0_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 0.0, 127.5);\n}\n#T_7fb02_row0_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 0.0, 153.00000000000003);\n}\n#T_7fb02_row0_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 0.0, 178.50000000000003);\n}\n#T_7fb02_row0_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 0.0, 204.0);\n}\n#T_7fb02_row0_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 0.0, 229.5);\n}\n#T_7fb02_row0_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 0.0, 255.0);\n}\n#T_7fb02_row1_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 25.5, 0.0);\n}\n#T_7fb02_row1_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 51.0, 0.0);\n}\n#T_7fb02_row1_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 76.50000000000001, 0.0);\n}\n#T_7fb02_row1_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 102.0, 0.0);\n}\n#T_7fb02_row1_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 127.5, 0.0);\n}\n#T_7fb02_row1_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 153.00000000000003, 0.0);\n}\n#T_7fb02_row1_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 178.50000000000003, 0.0);\n}\n#T_7fb02_row1_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 204.0, 0.0);\n}\n#T_7fb02_row1_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 229.5, 0.0);\n}\n#T_7fb02_row1_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 255.0, 0.0);\n}\n#T_7fb02_row2_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 25.5, 25.5);\n}\n#T_7fb02_row2_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 51.0, 51.0);\n}\n#T_7fb02_row2_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 76.50000000000001, 76.50000000000001);\n}\n#T_7fb02_row2_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 102.0, 102.0);\n}\n#T_7fb02_row2_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 127.5, 127.5);\n}\n#T_7fb02_row2_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 153.00000000000003, 153.00000000000003);\n}\n#T_7fb02_row2_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 178.50000000000003, 178.50000000000003);\n}\n#T_7fb02_row2_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 204.0, 204.0);\n}\n#T_7fb02_row2_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 229.5, 229.5);\n}\n#T_7fb02_row2_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 255.0, 255.0);\n}\n\n\n  \n    \n      \u00a0\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      violet\n      [0. 0. 0.]\n      [25.5  0.  25.5]\n      [51.  0. 51.]\n      [76.5  0.  76.5]\n      [102.   0. 102.]\n      [127.5   0.  127.5]\n      [153.   0. 153.]\n      [178.5   0.  178.5]\n      [204.   0. 204.]\n      [229.5   0.  229.5]\n      [255.   0. 255.]\n    \n    \n      yellow\n      [0. 0. 0.]\n      [25.5 25.5  0. ]\n      [51. 51.  0.]\n      [76.5 76.5  0. ]\n      [102. 102.   0.]\n      [127.5 127.5   0. ]\n      [153. 153.   0.]\n      [178.5 178.5   0. ]\n      [204. 204.   0.]\n      [229.5 229.5   0. ]\n      [255. 255.   0.]\n    \n    \n      cyan\n      [0. 0. 0.]\n      [ 0.  25.5 25.5]\n      [ 0. 51. 51.]\n      [ 0.  76.5 76.5]\n      [  0. 102. 102.]\n      [  0.  127.5 127.5]\n      [  0. 153. 153.]\n      [  0.  178.5 178.5]\n      [  0. 204. 204.]\n      [  0.  229.5 229.5]\n      [  0. 255. 255.]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nthey can all be recombined together on their respective order.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \n    all = pandas.concat([df, secondary]).loc[\n        \"red violet blue cyan green yellow\".split()]\n\n    all.style.applymap(rgb)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n#T_5b15c_row0_col0, #T_5b15c_row1_col0, #T_5b15c_row2_col0, #T_5b15c_row3_col0, #T_5b15c_row4_col0, #T_5b15c_row5_col0 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 0.0);\n}\n#T_5b15c_row0_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 0.0, 0.0);\n}\n#T_5b15c_row0_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 0.0, 0.0);\n}\n#T_5b15c_row0_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 0.0, 0.0);\n}\n#T_5b15c_row0_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 0.0, 0.0);\n}\n#T_5b15c_row0_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 0.0, 0.0);\n}\n#T_5b15c_row0_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 0.0, 0.0);\n}\n#T_5b15c_row0_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 0.0, 0.0);\n}\n#T_5b15c_row0_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 0.0, 0.0);\n}\n#T_5b15c_row0_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 0.0, 0.0);\n}\n#T_5b15c_row0_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 0.0, 0.0);\n}\n#T_5b15c_row1_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 0.0, 25.5);\n}\n#T_5b15c_row1_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 0.0, 51.0);\n}\n#T_5b15c_row1_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 0.0, 76.50000000000001);\n}\n#T_5b15c_row1_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 0.0, 102.0);\n}\n#T_5b15c_row1_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 0.0, 127.5);\n}\n#T_5b15c_row1_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 0.0, 153.00000000000003);\n}\n#T_5b15c_row1_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 0.0, 178.50000000000003);\n}\n#T_5b15c_row1_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 0.0, 204.0);\n}\n#T_5b15c_row1_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 0.0, 229.5);\n}\n#T_5b15c_row1_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 0.0, 255.0);\n}\n#T_5b15c_row2_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 25.5);\n}\n#T_5b15c_row2_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 51.0);\n}\n#T_5b15c_row2_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 76.50000000000001);\n}\n#T_5b15c_row2_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 102.0);\n}\n#T_5b15c_row2_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 127.5);\n}\n#T_5b15c_row2_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 153.00000000000003);\n}\n#T_5b15c_row2_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 178.50000000000003);\n}\n#T_5b15c_row2_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 204.0);\n}\n#T_5b15c_row2_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 229.5);\n}\n#T_5b15c_row2_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 0.0, 255.0);\n}\n#T_5b15c_row3_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 25.5, 25.5);\n}\n#T_5b15c_row3_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 51.0, 51.0);\n}\n#T_5b15c_row3_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 76.50000000000001, 76.50000000000001);\n}\n#T_5b15c_row3_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 102.0, 102.0);\n}\n#T_5b15c_row3_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 127.5, 127.5);\n}\n#T_5b15c_row3_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 153.00000000000003, 153.00000000000003);\n}\n#T_5b15c_row3_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 178.50000000000003, 178.50000000000003);\n}\n#T_5b15c_row3_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 204.0, 204.0);\n}\n#T_5b15c_row3_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 229.5, 229.5);\n}\n#T_5b15c_row3_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 255.0, 255.0);\n}\n#T_5b15c_row4_col1 {\n  font-size: 0px;\n  background-color: rgb(0.0, 25.5, 0.0);\n}\n#T_5b15c_row4_col2 {\n  font-size: 0px;\n  background-color: rgb(0.0, 51.0, 0.0);\n}\n#T_5b15c_row4_col3 {\n  font-size: 0px;\n  background-color: rgb(0.0, 76.50000000000001, 0.0);\n}\n#T_5b15c_row4_col4 {\n  font-size: 0px;\n  background-color: rgb(0.0, 102.0, 0.0);\n}\n#T_5b15c_row4_col5 {\n  font-size: 0px;\n  background-color: rgb(0.0, 127.5, 0.0);\n}\n#T_5b15c_row4_col6 {\n  font-size: 0px;\n  background-color: rgb(0.0, 153.00000000000003, 0.0);\n}\n#T_5b15c_row4_col7 {\n  font-size: 0px;\n  background-color: rgb(0.0, 178.50000000000003, 0.0);\n}\n#T_5b15c_row4_col8 {\n  font-size: 0px;\n  background-color: rgb(0.0, 204.0, 0.0);\n}\n#T_5b15c_row4_col9 {\n  font-size: 0px;\n  background-color: rgb(0.0, 229.5, 0.0);\n}\n#T_5b15c_row4_col10 {\n  font-size: 0px;\n  background-color: rgb(0.0, 255.0, 0.0);\n}\n#T_5b15c_row5_col1 {\n  font-size: 0px;\n  background-color: rgb(25.5, 25.5, 0.0);\n}\n#T_5b15c_row5_col2 {\n  font-size: 0px;\n  background-color: rgb(51.0, 51.0, 0.0);\n}\n#T_5b15c_row5_col3 {\n  font-size: 0px;\n  background-color: rgb(76.50000000000001, 76.50000000000001, 0.0);\n}\n#T_5b15c_row5_col4 {\n  font-size: 0px;\n  background-color: rgb(102.0, 102.0, 0.0);\n}\n#T_5b15c_row5_col5 {\n  font-size: 0px;\n  background-color: rgb(127.5, 127.5, 0.0);\n}\n#T_5b15c_row5_col6 {\n  font-size: 0px;\n  background-color: rgb(153.00000000000003, 153.00000000000003, 0.0);\n}\n#T_5b15c_row5_col7 {\n  font-size: 0px;\n  background-color: rgb(178.50000000000003, 178.50000000000003, 0.0);\n}\n#T_5b15c_row5_col8 {\n  font-size: 0px;\n  background-color: rgb(204.0, 204.0, 0.0);\n}\n#T_5b15c_row5_col9 {\n  font-size: 0px;\n  background-color: rgb(229.5, 229.5, 0.0);\n}\n#T_5b15c_row5_col10 {\n  font-size: 0px;\n  background-color: rgb(255.0, 255.0, 0.0);\n}\n\n\n  \n    \n      \u00a0\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n    \n  \n  \n    \n      red\n      [0. 0. 0.]\n      [25.5  0.   0. ]\n      [51.  0.  0.]\n      [76.5  0.   0. ]\n      [102.   0.   0.]\n      [127.5   0.    0. ]\n      [153.   0.   0.]\n      [178.5   0.    0. ]\n      [204.   0.   0.]\n      [229.5   0.    0. ]\n      [255.   0.   0.]\n    \n    \n      violet\n      [0. 0. 0.]\n      [25.5  0.  25.5]\n      [51.  0. 51.]\n      [76.5  0.  76.5]\n      [102.   0. 102.]\n      [127.5   0.  127.5]\n      [153.   0. 153.]\n      [178.5   0.  178.5]\n      [204.   0. 204.]\n      [229.5   0.  229.5]\n      [255.   0. 255.]\n    \n    \n      blue\n      [0. 0. 0.]\n      [ 0.   0.  25.5]\n      [ 0.  0. 51.]\n      [ 0.   0.  76.5]\n      [  0.   0. 102.]\n      [  0.    0.  127.5]\n      [  0.   0. 153.]\n      [  0.    0.  178.5]\n      [  0.   0. 204.]\n      [  0.    0.  229.5]\n      [  0.   0. 255.]\n    \n    \n      cyan\n      [0. 0. 0.]\n      [ 0.  25.5 25.5]\n      [ 0. 51. 51.]\n      [ 0.  76.5 76.5]\n      [  0. 102. 102.]\n      [  0.  127.5 127.5]\n      [  0. 153. 153.]\n      [  0.  178.5 178.5]\n      [  0. 204. 204.]\n      [  0.  229.5 229.5]\n      [  0. 255. 255.]\n    \n    \n      green\n      [0. 0. 0.]\n      [ 0.  25.5  0. ]\n      [ 0. 51.  0.]\n      [ 0.  76.5  0. ]\n      [  0. 102.   0.]\n      [  0.  127.5   0. ]\n      [  0. 153.   0.]\n      [  0.  178.5   0. ]\n      [  0. 204.   0.]\n      [  0.  229.5   0. ]\n      [  0. 255.   0.]\n    \n    \n      yellow\n      [0. 0. 0.]\n      [25.5 25.5  0. ]\n      [51. 51.  0.]\n      [76.5 76.5  0. ]\n      [102. 102.   0.]\n      [127.5 127.5   0. ]\n      [153. 153.   0.]\n      [178.5 178.5   0. ]\n      [204. 204.   0.]\n      [229.5 229.5   0. ]\n      [255. 255.   0.]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[\u00a0]:",
      "tags": "",
      "url": "/posts/e2cae138e4bb043cd277709ff45ba8a3/2021-10-11-colorizing/"
    },
    {
      "title": "2021-10-08-distributions-dataframe",
      "text": "what do we learn when we look at the distributions on our system\u00b6\n\n\n\n\n\n\nimportlib.metadata is an addition to Python 3.8 that makes it easier to explore the packages in your current python environment. we are going to load this data into pandas and see what we can learn from this data. this approach is fabulous way to generate really data for a demonstration.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport importlib.metadata, pandas, toolz\n\n\n    \n\n\n\n\n\n\n\ncreate a series from importlib.metadata.distributions . each distribution contains information about a package.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n    distributions = pandas.Series({x.metadata.get(\"Name\"): x for x in importlib.metadata.distributions()})\n    distributions.sample(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nsphinxcontrib-bibtex    <importlib.metadata.PathDistribution object at...\npyasn1-modules          <importlib.metadata.PathDistribution object at...\ndtype: object\n\n\n\n\n\n\n\n\n\n\n\nthe distributions can be expanded into a tidy dataframe with the following features.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n    features = ['files', 'version', 'requires', 'metadata']\n\n\n    \n\n\n\n\n\n\n\nwe'll widen our distributions to a tidy dataframe\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n    df = distributions.apply(\n        toolz.compose_left(operator.attrgetter(*features), pandas.Series)\n    ).rename(columns=dict(zip(range(len(features)), features)))\n    df.sample(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      files\n      version\n      requires\n      metadata\n    \n  \n  \n    \n      blinker\n      [blinker-1.4.dist-info/AUTHORS, blinker-1.4.di...\n      1.4\n      None\n      [Metadata-Version, Name, Version, Summary, Hom...\n    \n    \n      conda-package-handling\n      [../../../bin/cph, conda_package_handling-1.7....\n      1.7.3\n      [six]\n      [Metadata-Version, Name, Version, Summary, Hom...\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nthere are still some goodies in this dataframe nested into the metadata column. in the next segment we create a wider dataframe with distribution details and package metadata.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n    df = pandas.concat(dict(\n        distribution=df,\n        metadata=df[\"metadata\"].apply(\n            toolz.compose_left(dict, pandas.Series)\n        )\n    ), axis=1)\n    df.sample(2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n\n  \n    \n      \n      distribution\n      metadata\n    \n    \n      \n      files\n      version\n      requires\n      metadata\n      Metadata-Version\n      Name\n      Version\n      Summary\n      Home-page\n      Author\n      ...\n      Requires-Dist\n      Project-URL\n      Description-Content-Type\n      Maintainer\n      Maintainer-email\n      License-File\n      Provides-Extra\n      Description\n      Download-URL\n      Provides\n    \n  \n  \n    \n      sphinx-book-theme\n      [sphinx_book_theme-0.1.4.dist-info/INSTALLER, ...\n      0.1.4\n      [beautifulsoup4 (<5,>=4.6.1), click (~=7.1), d...\n      [Metadata-Version, Name, Version, Summary, Hom...\n      2.1\n      sphinx-book-theme\n      0.1.4\n      Jupyter Book: Create an online book with Jupyt...\n      https://jupyterbook.org/\n      Project Jupyter Contributors\n      ...\n      beautifulsoup4 (<5,>=4.6.1)\n      Documentation, https://jupyterbook.org\n      text/markdown\n      NaN\n      NaN\n      NaN\n      code_style\n      NaN\n      NaN\n      NaN\n    \n    \n      html5lib\n      [html5lib-1.1.dist-info/AUTHORS.rst, html5lib-...\n      1.1\n      [six (>=1.9), webencodings, genshi ; extra == ...\n      [Metadata-Version, Name, Version, Summary, Hom...\n      2.1\n      html5lib\n      1.1\n      HTML parser based on the WHATWG HTML specifica...\n      https://github.com/html5lib/html5lib-python\n      NaN\n      ...\n      six (>=1.9)\n      NaN\n      NaN\n      James Graham\n      james@hoppipolla.co.uk\n      NaN\n      all\n      NaN\n      NaN\n      NaN\n    \n  \n\n2 rows \u00d7 26 columns\n\n\n\n\n\n\n\n\n\n\n\nwhat can we learn about our environment?\u00b6\n\n\n\n\n\n\nhow many distributions does it contain?\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n    F\"\"\"in this environment, there are {len(df)} distributions installed.\"\"\"\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n'in this environment, there are 363 distributions installed.'\n\n\n\n\n\n\n\n\n\n\n\nhow many files are in each distribution\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n    df[\"distribution\"][\"files\"].apply(lambda x: len(x or [])).sort_values(ascending=False).iloc[:10].to_frame().T\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      mkdocs-material\n      bokeh\n      jedi\n      pandas\n      notebook\n      mypy\n      panel\n      numpy\n      Faker\n      holoviews\n    \n  \n  \n    \n      files\n      8144\n      2244\n      1763\n      1661\n      1516\n      1511\n      1350\n      1194\n      1017\n      951\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nwhat is the distribution of licenses?\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndf[\"metadata\"][\"License\"].value_counts().iloc[:10].to_frame().T\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      MIT\n      BSD\n      BSD-3-Clause\n      UNKNOWN\n      MIT License\n      Apache 2.0\n      ISC\n      BSD License\n      Apache License, Version 2.0\n      Apache Software License\n    \n  \n  \n    \n      License\n      100\n      62\n      37\n      36\n      17\n      13\n      6\n      6\n      5\n      5\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nwho authored my packages?\u00b6\n\n\n\n\n\nIn\u00a0[9]:\n\n    \ndf[\"metadata\"][\"Author\"].value_counts().iloc[:10].to_frame().T\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Jupyter Development Team\n      wxyz contributors\n      S\u00e9bastien Eustace\n      Georg Brandl\n      IPython Development Team\n      Chris Sewell\n      Kenneth Reitz\n      Executable Book Project\n      Armin Ronacher\n      Thomas Kluyver\n    \n  \n  \n    \n      Author\n      16\n      12\n      10\n      8\n      7\n      6\n      6\n      6\n      5\n      4\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nconclusion\u00b6there is a juicy dataset in your environment just waiting for you to explore. what will you find?",
      "tags": "",
      "url": "/posts/f34f1fc4454de5e61b6ed55a6736071c/2021-10-08-distributions-dataframe/"
    }
  ]
};