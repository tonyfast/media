{
  "title": "JupyterBookConfig",
  "description": "model for the jupyter book configuration file\nthat contains all of the documentation building information.\n\nNotes\n-----\n\nit configures:\n* sphinx\n* latex\n* nikola\n\n    both nikola and sphinx use the conf.py convention. nikola using capital letters\n    for variables names while sphinx uses lowercase. because of these differences we\n    can configure documentation for both in the same file, and share configuration\n    metadata.\n\nNote\n----\n\nthe descriptions were taken from the jb docs https://jupyterbook.org/customize/config.html",
  "type": "object",
  "properties": {
    "title": {
      "title": "Title",
      "type": "string"
    },
    "author": {
      "title": "Author",
      "type": "string"
    },
    "copyright": {
      "title": "Copyright",
      "type": "string"
    },
    "logo": {
      "title": "Logo",
      "type": "string"
    },
    "exclude_patterns": {
      "title": "Exclude Patterns",
      "type": "array",
      "items": {}
    },
    "only_build_toc_files": {
      "title": "Only Build Toc Files",
      "default": false,
      "type": "boolean"
    },
    "execute": {
      "$ref": "#/definitions/Execute"
    },
    "parse": {
      "$ref": "#/definitions/Parse"
    },
    "html": {
      "$ref": "#/definitions/Html"
    },
    "repository": {
      "$ref": "#/definitions/Repository"
    },
    "launch_buttons": {
      "$ref": "#/definitions/Buttons"
    },
    "latex": {
      "$ref": "#/definitions/Latex"
    },
    "sphinx": {
      "$ref": "#/definitions/Sphinx"
    }
  },
  "definitions": {
    "EXECUTE": {
      "title": "EXECUTE",
      "description": "An enumeration.",
      "enum": [
        "auto",
        "force",
        "cache",
        "off"
      ]
    },
    "STDERR": {
      "title": "STDERR",
      "description": "An enumeration.",
      "enum": [
        "show",
        "remove",
        "remove-warn",
        "warn",
        "error",
        "severe"
      ]
    },
    "Execute": {
      "title": "Execute",
      "description": "notebook execution settings",
      "type": "object",
      "properties": {
        "execute_notebooks": {
          "description": "jupyter book execution mode; off by default",
          "default": "off",
          "allOf": [
            {
              "$ref": "#/definitions/EXECUTE"
            }
          ]
        },
        "cache": {
          "title": "Cache",
          "description": "A path to the jupyter cache that will be used to store execution artifacts. Defaults to `_build/.jupyter_cache/`",
          "default": "",
          "type": "string"
        },
        "exclude_patterns": {
          "title": "Exclude Patterns",
          "description": "A list of patterns to *skip* in execution (e.g. a notebook that takes a really long time)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "title": "Timeout",
          "description": "The maximum time (in seconds) each notebook cell is allowed to run.",
          "default": 30,
          "type": "number"
        },
        "run_in_temp": {
          "title": "Run In Temp",
          "description": "If `True`, then a temporary directory will be created and used as the command working directory (cwd), \n            otherwise the notebook's parent directory will be the cwd.",
          "default": false,
          "type": "boolean"
        },
        "allow_errors": {
          "title": "Allow Errors",
          "description": "when a code cell raises an error the execution is stopped, otherwise all cells are always run. default is false so docs are created",
          "default": true,
          "type": "boolean"
        },
        "stderr_output": {
          "description": "the mode to show the stderr output in; the default is show for debugging.",
          "default": "show",
          "allOf": [
            {
              "$ref": "#/definitions/STDERR"
            }
          ]
        }
      }
    },
    "Parse": {
      "title": "Parse",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "myst_enable_extensions": {
          "title": "Myst Enable Extensions",
          "description": "default extensions to enable in the myst parser. See https://myst-parser.readthedocs.io/en/latest/using/syntax-optional.html",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "myst_url_schemes": {
          "title": "Myst Url Schemes",
          "description": "URI schemes that will be recognised as external URLs in Markdown links",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Comments": {
      "title": "Comments",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "hypothesis": {
          "title": "Hypothesis",
          "default": false,
          "type": "boolean"
        },
        "utterances": {
          "title": "Utterances",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "Html": {
      "title": "Html",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "favicon": {
          "title": "Favicon",
          "default": "",
          "type": "string"
        },
        "use_edit_page_button": {
          "title": "Use Edit Page Button",
          "default": false,
          "type": "boolean"
        },
        "use_repository_button": {
          "title": "Use Repository Button",
          "default": false,
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "use_issues_button": {
          "title": "Use Issues Button",
          "default": false,
          "type": "boolean"
        },
        "use_multitoc_numbering": {
          "title": "Use Multitoc Numbering",
          "default": true,
          "type": "boolean"
        },
        "extra_navbar": {
          "title": "Extra Navbar",
          "default": "",
          "type": "string"
        },
        "extra_footer": {
          "title": "Extra Footer",
          "default": "",
          "type": "string"
        },
        "google_analytics_id": {
          "title": "Google Analytics Id",
          "default": "",
          "type": "string"
        },
        "home_page_in_navbar": {
          "title": "Home Page In Navbar",
          "default": true,
          "type": "boolean"
        },
        "baseurl": {
          "title": "Baseurl",
          "default": "",
          "type": "string"
        },
        "comments": {
          "$ref": "#/definitions/Comments"
        }
      }
    },
    "Repository": {
      "title": "Repository",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {}
    },
    "Buttons": {
      "title": "Buttons",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {}
    },
    "TEX": {
      "title": "TEX",
      "description": "An enumeration.",
      "enum": [
        "pdflatex",
        "xelatex",
        "luatex",
        "platex",
        "uplatex"
      ]
    },
    "Latex": {
      "title": "Latex",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "latex_engine": {
          "default": "pdflatex",
          "allOf": [
            {
              "$ref": "#/definitions/TEX"
            }
          ]
        },
        "use_jupyterbook_latex": {
          "title": "Use Jupyterbook Latex",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "Nikola": {
      "title": "Nikola",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "BLOG_AUTHOR": {
          "title": "Blog Author",
          "type": "string"
        },
        "BLOG_TITLE": {
          "title": "Blog Title",
          "type": "string"
        },
        "SITE_URL": {
          "title": "Site Url",
          "type": "string"
        },
        "BLOG_EMAIL": {
          "title": "Blog Email",
          "type": "string"
        },
        "BLOG_DESCRIPTION": {
          "title": "Blog Description",
          "type": "string"
        },
        "DEFAULT_LANG": {
          "title": "Default Lang",
          "default": "en",
          "type": "string"
        },
        "POSTS": {
          "title": "Posts",
          "type": "array",
          "items": {}
        },
        "PAGES": {
          "title": "Pages",
          "type": "array",
          "items": {}
        },
        "INDEX_TEASERS": {
          "title": "Index Teasers",
          "default": true,
          "type": "boolean"
        },
        "EXTRA_PLUGINS_DIRS": {
          "title": "Extra Plugins Dirs",
          "type": "array",
          "items": {}
        },
        "COMPILERS": {
          "title": "Compilers",
          "type": "object"
        }
      },
      "required": [
        "BLOG_AUTHOR",
        "BLOG_TITLE",
        "BLOG_DESCRIPTION"
      ]
    },
    "Sphinx": {
      "title": "Sphinx",
      "description": "OpenModels are custom object oriented classes with an implict schema (eg jupyterbook, pyproject)",
      "type": "object",
      "properties": {
        "extra_extensions": {
          "title": "Extra Extensions",
          "type": "array",
          "items": {}
        },
        "local_extensions": {
          "title": "Local Extensions",
          "type": "array",
          "items": {}
        },
        "config": {
          "title": "Config",
          "description": "extra sphinx configuration values",
          "allOf": [
            {
              "$ref": "#/definitions/Nikola"
            }
          ]
        }
      }
    }
  }
}